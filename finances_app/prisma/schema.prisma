// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
	binaryTargets = ["native", "rhel-openssl-3.0.x"]
	output   = "../src/generated/prisma"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
	directUrl = env("DIRECT_URL")
}

model User {
	id            String    @id
	name          String
	email         String
	emailVerified Boolean
	image         String?
	createdAt     DateTime
	updatedAt     DateTime
	sessions      Session[]
	accounts      Account[]
	sankeys		  Sankey[]
	subscription  Subscription[]

	@@unique([email])
	@@map("user")
}

model Session {
	id        String   @id
	expiresAt DateTime
	token     String
	createdAt DateTime
	updatedAt DateTime
	ipAddress String?
	userAgent String?
	userId    String
	user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@unique([token])
	@@map("session")
}

model Account {
	id                    String    @id
	accountId             String
	providerId            String
	userId                String
	user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
	accessToken           String?
	refreshToken          String?
	idToken               String?
	accessTokenExpiresAt  DateTime?
	refreshTokenExpiresAt DateTime?
	scope                 String?
	password              String?
	createdAt             DateTime
	updatedAt             DateTime

	@@map("account")
}

model Verification {
	id         String    @id
	identifier String
	value      String
	expiresAt  DateTime
	createdAt  DateTime?
	updatedAt  DateTime?

	@@map("verification")
}

model Sankey {
	id			String		@id @default(uuid())
	from		String
	to			String
	amount		Decimal		@db.Decimal(10, 2)
	type 		String

	parentId	String?	  	
	parent		Sankey?   	@relation("SankeyParent", fields: [parentId], references: [id], onDelete: Cascade)
  	children	Sankey[]  	@relation("SankeyParent")

	userId		String
	user        User      	@relation(fields: [userId], references: [id], onDelete: Cascade)

	createdAt   DateTime @default(now()) @db.Timestamptz(6)
  	updatedAt   DateTime @updatedAt @db.Timestamptz(6)

	@@map("sankey")
}

model Subscription {
	id				String 		@id @default(uuid())
	name 			String
	amount			Decimal 	@db.Decimal(10,2)
	recurrence		String
	executionDate 	DateTime
	icon			String

	userId		String
	user        User      	@relation(fields: [userId], references: [id], onDelete: Cascade)

	createdAt    DateTime @default(now()) @db.Timestamptz(6)
  	updatedAt    DateTime @updatedAt @db.Timestamptz(6)
}
